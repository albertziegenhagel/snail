{
  "name": "snail",
  "displayName": "Snail",
  "description": "VS Code extension to display profiling data",
  "author": "Albert Ziegenhagel",
  "publisher": "albertziegenhagel",
  "license": "MIT",
  "version": "0.0.1",
  "homepage": "https://github.com/albertziegenhagel/snail",
  "bugs": {
    "url": "https://github.com/albertziegenhagel/snail/issues"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/albertziegenhagel/snail.git"
  },
  "engines": {
    "vscode": "^1.74.0"
  },
  "categories": [],
  "activationEvents": [],
  "contributes": {
    "customEditors": [
      {
        "viewType": "snail.perfSession",
        "displayName": "Performance Session",
        "selector": [
          {
            "filenamePattern": "*.etl"
          },
          {
            "filenamePattern": "*.diagsession"
          },
          {
            "filenamePattern": "*perf.data"
          }
        ]
      }
    ],
    "configuration": [
      {
        "title": "Snail",
        "properties": {
          "snail.server.executable": {
            "type": "string",
            "description": "Path to the snail server executable. If empty, the executable packaged with the extension will be used."
          },
          "snail.server.debug": {
            "type": "boolean",
            "default": false,
            "description": "Whether to start the server in debug mode. In this mode the server will wait for a debugger to attach right after start and will not do anything until then."
          },
          "snail.pdbSymbols.searchDirs": {
            "type": "array",
            "items": {
              "type": "string",
              "title": "directory"
            },
            "description": "Directories to search for module files (*.exe, *.dll) and debug symbol databases (*.pdb)."
          },
          "snail.pdbSymbols.cacheDir": {
            "type": "string",
            "description": "Directory to store debug symbols downloaded from symbol servers to. If empty, the default is $TEMP/SymbolCache."
          },
          "snail.pdbSymbols.serverUrls": {
            "type": "array",
            "items": {
              "type": "string",
              "title": "url"
            },
            "description": "URLs of additional symbol servers to download missing debug symbols from. E.g. https://msdl.microsoft.com/download/symbols."
          },
          "snail.pdbSymbols.noDefaultServerUrls": {
            "type": "boolean",
            "default": false,
            "description": "If true, no default symbol servers are used, but only the ones specified by the user. The default symbol server is https://msdl.microsoft.com/download/symbols."
          },
          "snail.dwarfDebugInfo.searchDirs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Directories to search for module files (executables and shared libraries *.so)"
          },
          "snail.dwarfDebugInfo.cacheDir": {
            "type": "string",
            "description": "Directory to store debug information downloaded from debuginfod servers to. If empty, the environment variable $DEBUGINFOD_CACHE_PATH is used. If not set, $XDG_CACHE_HOME/snail is used. If that is not set neither, a platform specific default is used (on Windows $TEMP/SnailCache. On other platforms, $HOME/.cache/snail or $TEMP/.cache/snail if the home directory could not be determined."
          },
          "snail.dwarfDebugInfo.debuginfodUrls": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "URLs of additional debuginfod servers to download missing debug information from. E.g. https://debuginfod.elfutils.org/."
          },
          "snail.dwarfDebugInfo.noDefaultDebuginfodUrls": {
            "type": "boolean",
            "default": false,
            "description": "If true, no default symbol servers are used, but only the ones specified by the user. The default symbol servers are loaded from the environment variable $DEBUGINFOD_URLS."
          },
          "snail.moduleLookup.pathMap": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "source": {
                  "type": "string",
                  "description": "Pattern of the path to match. This will be matches with the beginning of the path."
                },
                "target": {
                  "type": "string",
                  "description": "If a path matches with the source pattern, the matching part will be replaced by this replace text."
                }
              }
            },
            "description": "Path maps to be applied to module paths (executables, *.dll, *.so, ...) before trying to look the modules up."
          },
          "snail.moduleLookup.filterMode": {
            "type": "string",
            "enum": [
              "All but excluded",
              "Only included"
            ],
            "default": "All but excluded",
            "enumDescriptions": [
              "Load all modules but the ones given in the `Filter Exclude` list",
              "Load only modules explicitly given in the `Filter Include` list"
            ],
            "description": "The mode the filter should operate in."
          },
          "snail.moduleLookup.filterInclude": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Modules to exclude when \"Filter Mode\" is \"All but excluded\". Supports wildcards (as in '*.exe'). Needs to match the whole path, not just the filename."
          },
          "snail.moduleLookup.filterExclude": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Modules to include when \"Filter Mode\" is \"Only included\". Supports wildcards (as in '*.exe'). Needs to match the whole path, not just the filename."
          }
        }
      }
    ]
  },
  "main": "./dist/extension.js",
  "scripts": {
    "install:all": "npm install && cd webview-ui && npm install",
    "start:webview": "cd webview-ui && npm run dev",
    "build:webview": "cd webview-ui && npm run build",
    "vscode:prepublish": "npm run compile",
    "compile": "webpack",
    "watch": "webpack --watch",
    "package": "webpack --mode production --devtool hidden-source-map",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "npm run compile-tests && npm run compile && npm run lint",
    "lint": "eslint src --ext ts",
    "test": "node ./out/test/runTest.js"
  },
  "dependencies": {
    "vscode-jsonrpc": "^8.0.2"
  },
  "devDependencies": {
    "@types/glob": "^8.0.0",
    "@types/mocha": "^10.0.1",
    "@types/node": "^18.x",
    "@types/vscode": "^1.74.0",
    "@typescript-eslint/eslint-plugin": "7.8",
    "@typescript-eslint/parser": "7.8",
    "@vscode/test-electron": "^2.3.9",
    "eslint": "^8.28.0",
    "glob": "^8.1.0",
    "mocha": "^10.1.0",
    "ts-loader": "^9.4.2",
    "typescript": "^5.5.0",
    "webpack": "^5.94.0",
    "webpack-cli": "^5.0.1"
  }
}
